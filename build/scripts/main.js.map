{
  "version": 3,
  "sources": ["source/scripts/modules/color-converter.js", "source/scripts/modules/code-generator.js", "source/scripts/modules/form-validator.js", "source/scripts/modules/shadow-generator.js", "source/scripts/main.js"],
  "sourcesContent": ["export function hexToRgba (hex, opacity) {\n  const cleanHex = hex.replace(/^#/, '');\n\n  if (opacity < 0 || opacity > 1) {\n    throw new Error('Opacity range is from 0 to 1');\n  }\n\n  const r = parseInt(cleanHex.slice(0, 2), 16);\n  const g = parseInt(cleanHex.slice(2, 4), 16);\n  const b = parseInt(cleanHex.slice(4, 6), 16);\n\n  return `rgba(${r}, ${g}, ${b}, ${opacity})`;\n}\n", "import { hexToRgba } from './color-converter.js';\n\nexport function generateCSSCode (horizontal, vertical, blur, spread, shadowColor, boxColor, opacity, shadowType) {\n  const shadowColorWithOpacity = hexToRgba(shadowColor, opacity);\n\n  const shadowValue = `${horizontal}px ${vertical}px ${blur}px ${spread}px ${shadowColorWithOpacity}\n  ${shadowType === 'inset' ? 'inset' : ''}`;\n\n  const cssCode = `.box {\n    background: ${boxColor};\n    box-shadow: ${shadowValue};\n  }`;\n\n  return cssCode;\n}\n", "function validateNumberInput(input, min, max, errorElement, fieldName) {\n  const value = parseFloat(input.value);\n  let isValid = true;\n  let errorMessage = '';\n\n  if (input.value.trim() === '') {\n    isValid = false;\n    errorMessage = `${fieldName} is required`;\n  } else if (isNaN(value)) {\n    isValid = false;\n    errorMessage = `${fieldName} must be a number`;\n  } else if (value < min) {\n    isValid = false;\n    errorMessage = `${fieldName} must be at least ${min}`;\n  } else if (value > max) {\n    isValid = false;\n    errorMessage = `${fieldName} must be at most ${max}`;\n  }\n\n  if (errorElement) {\n    errorElement.textContent = errorMessage;\n    input.parentElement.classList.toggle('generator__input-wrapper--error', !isValid);\n  }\n\n  return isValid;\n}\n\nfunction validateColorInput(textInput, errorElement, fieldName) {\n  const hexColorRegex = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;\n  let isValid = true;\n  let errorMessage = '';\n\n  if (!textInput.value.trim()) {\n    isValid = false;\n    errorMessage = `${fieldName} is required`;\n  } else if (!hexColorRegex.test(textInput.value)) {\n    isValid = false;\n    errorMessage = `${fieldName} must be a valid hex color (e.g., #FF0000)`;\n  }\n\n  if (errorElement) {\n    errorElement.textContent = errorMessage;\n    textInput.parentElement.classList.toggle('.generator__general-color-wrapper--error', !isValid);\n  }\n\n  return isValid;\n}\n\nfunction validateOpacityInput(input, errorElement) {\n  const value = parseFloat(input.value);\n  let isValid = true;\n  let errorMessage = '';\n\n  if (input.value.trim() === '') {\n    isValid = false;\n    errorMessage = 'Opacity is required';\n  } else if (isNaN(value)) {\n    isValid = false;\n    errorMessage = 'Opacity must be a number';\n  } else if (value < 0) {\n    isValid = false;\n    errorMessage = 'Opacity must be at least 0';\n  } else if (value > 1) {\n    isValid = false;\n    errorMessage = 'Opacity must be at most 1';\n  }\n\n  if (errorElement) {\n    errorElement.textContent = errorMessage;\n    input.parentElement.classList.toggle('.generator__input-wrapper--error', !isValid);\n  }\n\n  return isValid;\n}\n\nexport function validateFormField(fieldType, input, errorElement, fieldName, min, max) {\n  switch (fieldType) {\n    case 'number':\n      return validateNumberInput(input, min, max, errorElement, fieldName);\n    case 'color':\n      return validateColorInput(input, errorElement, fieldName);\n    case 'opacity':\n      return validateOpacityInput(input, errorElement);\n    default:\n      return true;\n  }\n}\n", "import { hexToRgba } from './color-converter.js';\nimport { generateCSSCode } from './code-generator.js';\nimport { validateFormField } from './form-validator.js';\n\nexport function initShadowGenerator() {\n  const elements = getDOMElements();\n\n  setInitialValues(elements);\n  setupEventListeners(elements);\n  updateShadowPreview(elements);\n}\n\nfunction getDOMElements() {\n  const sizeWrappers = document.querySelectorAll('.generator__input-size');\n  const colorWrappers = document.querySelectorAll('.generator__input-color');\n\n  return {\n    sizeControls: Array.from(sizeWrappers).map((wrapper) => ({\n      input: wrapper.querySelector('input[type=\"number\"]'),\n      range: wrapper.querySelector('input[type=\"range\"]'),\n      error: wrapper.querySelector('.generator__error')\n    })),\n\n    colorControls: Array.from(colorWrappers).map((wrapper) => ({\n      picker: wrapper.querySelector('input[type=\"color\"]'),\n      text: wrapper.querySelector('input[type=\"text\"]'),\n      error: wrapper.querySelector('.generator__error')\n    })),\n\n    shadowTypeToggle: document.getElementById('toggle'),\n    getCodeButton: document.querySelector('.generator__get-button'),\n    closeCodeButton: document.querySelector('.generator__close-button'),\n    copyButton: document.querySelector('.generator__copy-button'),\n    boxView: document.querySelector('.generator__box-view'),\n    shadowBox: document.querySelector('.generator__shadow-box'),\n    codePreview: document.querySelector('.generator__code-preview'),\n    codeContent: document.querySelector('.generator__code-content')\n  };\n}\n\nfunction syncRangeAndNumber(control) {\n  control.range.value = control.input.value;\n}\n\nfunction syncColorInputs(control) {\n  control.picker.value = control.text.value;\n}\n\nfunction setInitialValues(elements) {\n  elements.sizeControls.forEach((control) => syncRangeAndNumber(control));\n  elements.colorControls.forEach((control) => syncColorInputs(control));\n}\n\nfunction setupRangeNumberSync(control, elements, index) {\n  const fieldConfigs = [\n    { type: 'number', name: 'Horizontal Length', min: 0, max: 100 },\n    { type: 'number', name: 'Vertical Length', min: 0, max: 100 },\n    { type: 'number', name: 'Blur Radius', min: 0, max: 100 },\n    { type: 'number', name: 'Spread Radius', min: 0, max: 100 },\n    { type: 'opacity', name: 'Opacity' }\n  ];\n\n  const config = fieldConfigs[index];\n\n  control.range.addEventListener('input', () => {\n    control.input.value = control.range.value;\n    validateFormField(config.type, control.input, control.error, config.name, config.min, config.max);\n    updateShadowPreview(elements);\n  });\n\n  control.input.addEventListener('input', () => {\n    control.range.value = control.input.value;\n    validateFormField(config.type, control.input, control.error, config.name, config.min, config.max);\n    updateShadowPreview(elements);\n  });\n}\n\nfunction setupColorSync(control, elements, index) {\n  const fieldNames = ['Shadow Color', 'Background Color', 'Box Color'];\n\n  control.picker.addEventListener('input', () => {\n    control.text.value = control.picker.value;\n    validateFormField('color', control.text, control.error, fieldNames[index]);\n    updateShadowPreview(elements);\n  });\n\n  control.text.addEventListener('input', () => {\n    control.picker.value = control.text.value;\n    validateFormField('color', control.text, control.error, fieldNames[index]);\n    updateShadowPreview(elements);\n  });\n}\n\nfunction validateAllFields(elements) {\n  let isValid = true;\n\n  const sizeFieldConfigs = [\n    { type: 'number', name: 'Horizontal Length', min: 0, max: 100 },\n    { type: 'number', name: 'Vertical Length', min: 0, max: 100 },\n    { type: 'number', name: 'Blur Radius', min: 0, max: 100 },\n    { type: 'number', name: 'Spread Radius', min: 0, max: 100 },\n    { type: 'opacity', name: 'Opacity' }\n  ];\n\n  const colorFieldNames = ['Shadow Color', 'Background Color', 'Box Color'];\n\n  elements.sizeControls.forEach((control, index) => {\n    const config = sizeFieldConfigs[index];\n    const fieldValid = validateFormField(\n      config.type,\n      control.input,\n      control.error,\n      config.name,\n      config.min,\n      config.max\n    );\n    if (!fieldValid) {\n      isValid = false;\n    }\n  });\n\n  elements.colorControls.forEach((control, index) => {\n    const fieldValid = validateFormField(\n      'color',\n      control.text,\n      control.error,\n      colorFieldNames[index]\n    );\n    if (!fieldValid) {\n      isValid = false;\n    }\n  });\n\n  return isValid;\n}\n\nfunction setupEventListeners(elements) {\n  elements.sizeControls.forEach((control, index) => setupRangeNumberSync(control, elements, index));\n  elements.colorControls.forEach((control, index) => setupColorSync(control, elements, index));\n\n  elements.getCodeButton.addEventListener('click', () => {\n    if (validateAllFields(elements)) {\n      showCodePreview(elements);\n    }\n  });\n\n  elements.shadowTypeToggle.addEventListener('change', () => updateShadowPreview(elements));\n  elements.closeCodeButton.addEventListener('click', () => hideCodePreview(elements));\n  elements.copyButton.addEventListener('click', () => copyCodeToClipboard(elements));\n}\n\nfunction updateShadowPreview(elements) {\n  const horizontal = document.getElementById('horizontal').value;\n  const vertical = document.getElementById('vertical').value;\n  const blur = document.getElementById('blur').value;\n  const spread = document.getElementById('spread').value;\n  const opacity = document.getElementById('opacity').value;\n  const shadowColor = document.getElementById('shadow').value;\n  const backgroundColor = document.getElementById('background').value;\n  const boxColor = document.getElementById('box').value.toUpperCase();\n  const shadowType = elements.shadowTypeToggle.checked ? 'inset' : 'outline';\n\n  elements.shadowBox.style.backgroundColor = backgroundColor;\n  elements.boxView.style.backgroundColor = boxColor;\n\n  const shadowColorWithOpacity = hexToRgba(shadowColor, opacity);\n  const shadowValue = `${horizontal}px ${vertical}px ${blur}px ${spread}px ${shadowColorWithOpacity} ${shadowType === 'inset' ? 'inset' : ''}`;\n\n  elements.boxView.style.boxShadow = shadowValue;\n}\n\nfunction showCodePreview(elements) {\n  const horizontal = document.getElementById('horizontal').value;\n  const vertical = document.getElementById('vertical').value;\n  const blur = document.getElementById('blur').value;\n  const spread = document.getElementById('spread').value;\n  const opacity = document.getElementById('opacity').value;\n  const shadowColor = document.getElementById('shadow').value;\n  const boxColor = document.getElementById('box').value.toUpperCase();\n  const shadowType = elements.shadowTypeToggle.checked ? 'inset' : 'outline';\n\n  const cssCode = generateCSSCode(horizontal, vertical, blur, spread, shadowColor, boxColor, opacity, shadowType);\n\n  elements.codeContent.textContent = cssCode;\n  elements.codePreview.style.zIndex = '7';\n}\n\nfunction hideCodePreview(elements) {\n  elements.codePreview.style.display = 'none';\n}\n\nasync function copyCodeToClipboard(elements) {\n  const code = elements.codeContent.textContent;\n  const buttonTextElement = elements.copyButton.querySelector('.generator__copy-button-text');\n\n  try {\n    await navigator.clipboard.writeText(code);\n    buttonTextElement.textContent = 'Copied!';\n\n    setTimeout(() => {\n      buttonTextElement.textContent = 'Copy to Clipboard';\n    }, 2000);\n  } catch {\n    buttonTextElement.textContent = 'Copy Failed!';\n    throw new Error('Failed to copy CSS code');\n  }\n}\n", "import { initShadowGenerator } from './modules/shadow-generator.js';\n\ninitShadowGenerator();\n"],
  "mappings": "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",
  "names": []
}
